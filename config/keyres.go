// Code generated by go-bindata.
// sources:
// ../go-bas/key/UTC--2020-03-11T06-56-52.423772000Z--33324a5ee0b35f17536ceda27274e88e76640f24
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\xaa\x1c\x41\x08\x45\xff\xc5\xe7\x6e\x28\x2d\xad\xdb\xdf\xa8\x65\x91\xe1\xdc\x86\xee\xe1\x90\x70\x98\x7f\x0f\x3d\x0f\xc9\xa3\x22\x6b\xef\xe5\x0f\xe8\x9c\x47\x9c\x27\x0c\xc8\x39\x13\xab\x44\x24\xcb\xb2\xb0\x4a\x2e\x1e\x53\xa9\x52\xe5\x68\x2d\x6a\x29\x9c\x16\x31\x6c\xe0\xc7\x9f\xfb\xe3\x0b\xc6\x0f\xf8\xed\xfe\x2b\x0e\x18\xa0\x71\xee\x48\x6d\xf7\xc7\x71\x1d\xbc\xd6\x8f\xf8\xfd\x80\x01\xa2\x54\x5c\xfb\x72\xb5\x54\xad\xa1\x38\x8b\xc8\xf4\x34\x89\x39\x34\x9b\xb7\x9a\x88\xaa\x5a\x51\xd3\x55\x95\xc3\x51\xa3\xaf\xba\x84\x51\xe3\x1f\xef\xae\x87\x7e\x9c\x57\xec\xed\xfb\x8a\x4c\x54\x3a\x26\x23\x97\x95\xdc\xac\xb3\x8a\x56\x52\x24\x6c\x58\x99\xe0\xb9\xc1\xdb\x5c\x30\xe0\x7c\x15\x86\xd7\xf8\x1f\x32\xdf\xde\xe3\x13\x46\xa6\x0d\x3e\x61\x50\x21\x64\xde\xe0\x0e\x03\x37\x38\x60\xb4\x0d\x4e\x7d\xbf\x04\x92\xd7\xd2\xda\x42\x2d\xaa\xee\x51\xc5\xb1\xe5\x92\x4b\x96\x5e\x70\xaa\x5a\xe6\xae\x84\x86\x9d\x5a\x13\x24\x9c\x96\x31\xb4\x8b\xb0\xd0\xb4\x7a\x15\xf9\x50\xbf\x7e\x5c\x7c\x76\xb5\xe8\xb9\x92\xb7\x32\x8b\xcc\x68\xa9\x70\x24\xc6\x82\xa1\x09\x67\x6a\x5d\x93\x32\xce\x6c\x86\xb4\xba\xb1\xa5\xc6\xc6\x5e\xd0\xe3\x22\xdd\x26\x0c\x28\x5e\x90\x56\xb2\x5d\x35\x64\xe7\xca\xbe\x9b\x4a\xec\x94\x5c\xd2\xa4\x66\xbd\x29\x6c\xf0\x1d\xc7\x79\xfb\xba\x24\x9f\x7f\x03\x00\x00\xff\xff\x33\x97\x5c\x42\xeb\x01\x00\x00")

func GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24Bytes() ([]byte, error) {
	return bindataRead(
		_GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24,
		"../go-bas/key/UTC--2020-03-11T06-56-52.423772000Z--33324a5ee0b35f17536ceda27274e88e76640f24",
	)
}

func GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24() (*asset, error) {
	bytes, err := GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../go-bas/key/UTC--2020-03-11T06-56-52.423772000Z--33324a5ee0b35f17536ceda27274e88e76640f24", size: 491, mode: os.FileMode(420), modTime: time.Unix(1583928551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../go-bas/key/UTC--2020-03-11T06-56-52.423772000Z--33324a5ee0b35f17536ceda27274e88e76640f24": GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"go-bas": &bintree{nil, map[string]*bintree{
			"key": &bintree{nil, map[string]*bintree{
				"UTC--2020-03-11T06-56-52.423772000Z--33324a5ee0b35f17536ceda27274e88e76640f24": &bintree{GoBasKeyUtc20200311t065652423772000z33324a5ee0b35f17536ceda27274e88e76640f24, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
